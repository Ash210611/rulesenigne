# Filename: BUILD
# Purpose: Define how to "Build" a Python PEX file for the Rules Engine
#          and the event loader.
# History:
# 	05/13/21: SWC Separated UN_RE_LE into it's own BUILD file.
#       03/29/21: SWC Wrote it.
# 
# For documentation on Please.Build, see: 
#        https://please.build/index.html
#
# To 'Build' the Python PEX files, run these 2 commands from the main repo 
#        directory:
#        plz build //un_re:un_re_main
#        plz build //un_re_le:un_re_le_main
#
# Those 2 commands will build 2 PEX files, one for UN_RE, and another for UN_RE_LE
# The PEX files will be found here:
#        plz-out/bin/un_re/un_re_main.pex
#        plz-out/bin/un_re_le/un_re_le_main.pex
#
# For comparison, Bryan Peska has a BUILD file here which can also push the
# output file(s) to Artifactory:
# https://github.sys.cigna.com/cigna/orchestrator-core-deployer/blob/master/ci/build_defs/plugin_manager.build_defs
#===============================================================================
# genrule(
#   name = "push_pex_to_artifactory",
#   srcs = "UN_RE.pex",
#   cmd = "curl -u "SVP_CORE_CI_PROD:c_AMCv_E_8r4XqKCjN8j" -X PUT "https://repo.sys.cigna.com/artifactory/cloudbees-ci-plugins/plugins-base-2.235.5.1-v2.tar.gz" -T plugins-base-2.235.5.1-v2.tar.gz"
#   )

filegroup(
    name = "commands",
    srcs = glob([
        "*.sh",
    ]),
    visibility = ["PUBLIC"],
)


python_library(
    name = "un_re",
    srcs = glob ([
        "add_thread_log_to_main_log.py",
        "antlr_compile_grammar.py",
        "antlr_create_lib_dir.py",
        "antlr_create_logs_dir.py",
        "antlr_get_jar_file.py",
        "antlr_parse_stmt.py",
        "antlr_set_env_vars.py",
        "antlr_show_context.py",
        "authorize_UN_RE.py",
        "binary_search.py",
        "check_all_rules.py",
        "check_file_size.py",
        "check_articles.py",
        "check_datatype_for_classword.py",
        "check_file_size.py",
        "check_for_bad_characters.py",
        "check_for_dup_include_files.py",
        "check_for_old_business_terms.py",
        "check_for_rule_exception.py",
        "check_for_windows_backslash.py",
        "check_g001.py",
        "check_g003.py",
        "check_g004.py",
        "check_g005.py",
        "check_g011.py",
        "check_g012.py",
        "check_r001.py",
        "check_r002.py",
        "check_r003.py",
        "check_r004.py",
        "check_r005.py",
        "check_r006.py",
        "check_r201.py",
        "check_r203.py",
        "check_r205.py",
        "check_r207.py",
        "check_r213.py",
        "check_r216.py",
        "check_r217.py",
        "check_r219.py",
        "check_r221.py",
        "check_r232.py",
        "check_r241.py",
        "check_r242.py",
        "check_r243.py",
        "check_r245.py",
        "check_r247.py",
        "check_r253.py",
        "check_r258.py",
        "check_r260.py",
        "check_r298.py",
        "check_r299.py",
        "check_r300.py",
        "check_r301.py",
        "check_r302.py",
        "check_r303.py",
        "check_r304.py",
        "check_r305.py",
        "check_r306.py",
        "check_r307.py",
        "check_r308.py",
        "check_r309.py",
        "check_r401.py",
        "check_r402.py",
        "check_r403.py",
        "check_r405.py",
        "check_r406.py",
        "check_r407.py",
        "check_r408.py",
        "check_r411.py",
        "check_r412.py",
        "check_r413.py",
        "check_r414.py",
        "check_r415.py",
        "check_r416.py",
        "check_r419.py",
        "check_r420.py",
        "check_r421.py",
        "check_r424.py",
        "check_r425.py",
        "check_r426.py",
        "check_r427.py",
        "check_r428.py",
        "check_r429.py",
        "check_r430.py",
        "check_r431.py",
        "check_r432.py",
        "check_r433.py",
        "check_r434.py",
        "check_r435.py",
        "check_r436.py",
        "check_r437.py",
        "check_r438.py",
        "check_r439.py",
        "check_r440.py",
        "check_r441.py",
        "check_r442.py",
        "check_r443.py",
        "check_r444.py",
        "check_r445.py",
        "check_r446.py",
        "check_r447.py",
        "check_r449.py",
        "check_r450.py",
        "check_r451.py",
        "check_r452.py",
        "check_r453.py",
        "check_r454.py",
        "check_r456.py",
        "check_r457.py",
        "check_r500.py",
        "check_r501.py",
        "check_r502.py",
        "check_r503.py",
        "check_r504.py",
        "check_r505.py",
        "check_r506.py",
        "check_r507.py",
        "check_r508.py",
        "check_r509.py",
        "check_r510.py",
        "check_r701.py",
        "check_r702.py",
        "check_r703.py",
        "check_r704.py",
        "check_r705.py",
        "check_r706.py",
        "check_r707.py",
        "check_r708.py",
        "check_r709.py",
        "check_r710.py",
        "check_r711.py",
        "check_r712.py",
        "check_r713.py",
        "check_r714.py",
        "check_r715.py",
        "check_r716.py",
        "check_r717.py",
        "check_r718.py",
        "classify_command_type.py",
        "class_definitions.py",
        "class_definitions_base.py",
        "clean_database_base.py",
        "clean_file.py",
        "clean_one_dreml_statement.py",
        "clean_one_hive_statement.py",
        "cleanup_old_tmp_directories.py",
        "count_command_type.py",
        "count_stmts_processed.py",
        "damodre_get_list_of_input_files.py",
        "databricks_get_list_of_input_files.py",
        "display_summary_message.py",
        "display_validated_input_args.py",
        "dreml_extract_sql_stmts.py",
        "dreml_extract_from_BTEQ.py",
        "dreml_extract_from_py.py",
        "dreml_extract_from_ksh.py",
        "dreml_extract_from_txt.py",
        "dreml_get_list_of_dml_files.py",
        "dreml_list_files_by_sha.py",
        "ERROR_NUMBERS.py",
        "extractModelJson.py",
        "extract_sql_stmts_from_sql_file.py",
        "file_is_utf8_readable.py",
        "find_classword.py",
        "find_file.py",
        "fprint.py",
        "get_bad_char_list.py",
        "get_file_contents.py",
        "get_1_env_value.py",
        "get_all_antlr_findings.py",
        "get_all_db2_sql_statements.py",
        "get_all_esp_antlr_findings.py",
        "get_all_hive_antlr_findings.py",
        "get_all_sql_statements.py",
        "get_antlr_findings.py",
        "get_cfg_array_exceptions.py",
        "get_cfg_articles.py",
        "get_cfg_business_terms.py",
        "get_cfg_classwords.py",
        "get_cfg_classword_datatypes.py",
        "get_cfg_classword_datatype_variations.py",
        "get_cfg_classword_exceptions.py",
        "get_cfg_Enterprise_Naming_Standards.py",
        "get_cfg_extrnl_nm.py",
        "get_cfg_known_db.py",
        "get_cfg_multiset_base_tables.py",
        "get_cfg_rules_exceptions.py",
        "get_cfg_table_comment.py",
        "get_cfg_techdebt_exclusions.py",
        "get_comt_user_id.py",
        "get_databricks_sql_statements.py",
        "get_expected_content.py",
        "get_hive_antlr_findings.py",
        "get_memory_used.py",
        "get_redshift_statements.py",
        "get_rules.py",
        "get_ruleset_severities.py",
        "get_rules_urls.py",
        "get_snowflake_sql_statements.py",
        "get_td_antlr_findings.py",
        "get_uncleared_techdebt.py",
        "get_valid_BUC_codes.py",
        "global_shared_variables.py",
        "indent.py",
        "indent_debug.py",
        "indent_error.py",
        "indent_info.py",
        "indent_warning.py",
        "initialize_env_variables.py",
        "is_a_dml_statement.py",
        "load_configuration_files.py",
        "load_erwin_json_to_dkc.py",
        "load_json_globals.py",
        "load_postgres.py",
        "KNOWN_DB.py",
        "make_local_script_dir.py",
        "ore_antlr_parse_stmt.py",
        "ore_extract_sql_statements.py",
        "ore_parse_sql_statements.py",
        "ore_read_files.py",
        "ore_transfer_parsed_attributes.py",
        "populate_workspace_tokens.py",
        "post_success_event_records.py",
        "prepare_stmt.py",
        "print_command_summary.py",
        "print_msg.py",
        "print_one_sql_statement.py",
        "print_startup_messages.py",
        "process_files.py",
        "process_one_esp_file.py",
        "process_one_json_file.py",
        "process_one_sql_file.py",
        "process_one_sql_stmt.py",
        "read_the_list_of_input_files.py",
        "refresh_sql_statement_objs.py",
        "remove_comments.py",
        "remove_leading_blank_lines.py",
        "remove_sqlplus_prompts.py",
        "rezero_the_command_counters.py",
        "run_pg_statement.py",
        "save_sql_stmt.py",
        "scan_for_a_ruleset_indicator.py",
        "set_database_num.py",
        "setup_logging.py",
        "setup_main_environment.py",
        "should_skip_this_file.py",
        "split_antlr_line.py",
        "split_db_from_obj_name.py",
        "split_name_parts.py",
        "split_value_from_line.py",
        "notice_file_findings.py",
        "un_re_get_list_of_excepted_files.py",
        "validate_input_arguments.py",
        "validate_xml_file.py",
        "write_junit_xml.py",
        "write_local_script_name.py",
        ]),
    deps = [
        "//third_party/python:antlr4-python3-runtime",
        "//third_party/python:certifi",
        "//third_party/python:chardet",
        "//third_party/python:future",
        "//third_party/python:idna",
        "//third_party/python:junitparser",
        "//third_party/python:lxml",
        "//third_party/python:psycopg2-binary",
        "//third_party/python:requests",
        "//third_party/python:sqlparse",
        "//third_party/python:urllib3",
        "//third_party/python:xlrd",
        "//un_re/Antlr:Antlr",
        ],
)

python_binary(
    name = "un_re_main",
    main = "un_re_main.py",
    deps = [
        "//un_re:un_re", 
        ],
    resources = [
        "resources/cfg_array_exceptions.lst",
        "resources/cfg_articles.lst",
        "resources/cfg_business_terms.lst",
        "resources/cfg_classwords.lst",
        "resources/cfg_classword_datatypes.lst",
        "resources/cfg_classword_datatype_variations.lst",
        "resources/cfg_classword_exceptions.lst",
        "resources/cfg_Enterprise_Naming_Standards.lst",
        "resources/cfg_rules_exceptions.lst",
        "resources/cfg_known_db.lst",
        "resources/cfg_multiset_base_tables.lst",
        "resources/dbchangelog-4.4.xsd",
        "resources/rules.DAMODRE.lst",
        "resources/rules.DATA_MODEL.lst",
        "resources/rules.DATABRICKS.lst",
        "resources/rules.DB2_RE.lst",
        "resources/Rules_Engine.expected.z",
        "resources/rules_eng.lst",
        "resources/rules_urls.lst",
        "resources/rules.ESP_RE.lst",
        "resources/ruleset_severities.lst",
        "resources/rules.HIVE_DDL_RE.lst",
        "resources/rules_long_descriptions.lst",
        "resources/rules.lst",
        "resources/rules_urls.lst",
        "resources/rules.ORE.lst",
        "resources/rules.PG_RE.lst",
        "resources/rules.REDSHIFT.lst",
        "resources/rules.SNOWFLAKE.lst",
        "resources/rules.TERADATA_DDL.lst",
        "resources/rules.TERADATA_DML.lst",
        "resources/rules.DATAOPS_TDV_DDL.lst",
        "resources/valid_BUC_codes.lst",
        "shell_scripts/dreml_list_files_by_sha.bash",
        ],
)

filegroup(
    name = "evaluate_output",
    srcs = glob(["evaluate_output/*",]),
    visibility = ["PUBLIC"],
)